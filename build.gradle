plugins {
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users in 1.21.x, so your mod should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
/// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}


// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // NeoGradle automatically adds the Forge maven and Maven Central for you

    maven { url = 'https://maven.blamejared.com' }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/mezz/jei/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        // location of pehkui maven
        url = "https://jitpack.io"
    }

    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by NeoGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "vazkii.patchouli:Patchouli:${patchouli_version}-${patchouli_version_kind}:api"
    runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}-${patchouli_version_kind}"

    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly("mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly("mezz.jei:jei-${mc_version}-neoforge:${jei_version}")

    implementation("dev.latvian.mods:kubejs-neoforge:${kubejs_version}")
//
//    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
//    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
//    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
//tasks.named('jar', Jar).configure {
//    manifest {
//        attributes([
//                'Specification-Title'     : mod_id,
//                'Specification-Vendor'    : mod_authors,
//                'Specification-Version'   : '1', // We are version 1 of ourselves
//                'Implementation-Title'    : project.name,
//                'Implementation-Version'  : project.jar.archiveVersion,
//                'Implementation-Vendor'   : mod_authors,
//                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
//        ])
//    }
//
//    // This is the preferred method to reobfuscate your jar file
//    finalizedBy 'reobfJar'
//}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

modrinth {
    token = System.getenv("MODRINTH_TOKEN") // Remember to have the MODRINTH_TOKEN environment variable set or else this will fail - just make sure it stays private!
    projectId = "${mod_id}" // This can be the project ID or the slug. Either will work!
    versionNumber = "${mod_version}" // You don't need to set this manually. Will fail if Modrinth has this version already
    versionName = "reactive-${mod_version}"
    versionType = "release" // This is the default -- can also be `beta` or `alpha`
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = ["1.21", "1.21.1"]

    // Try to read the changelog from the provided file.
    var changelog_file_stream = new FileInputStream("${changelog_file}")
    var changelog_lines = changelog_file_stream.readLines()
    var changelog_builder = new StringBuilder();
    for(String line : changelog_lines){
        changelog_builder.append(line).append('\n');
    }
    changelog = changelog_builder.toString()

    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "patchouli" // Creates a new required dependency on Patchouli
    }
}

curseforge {
    project {
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        id = "${curseforge_project_id}"
        changelog = file("LATEST_CHANGELOG.md") // A file can also be set using: changelog = file('changelog.txt')
        releaseType = 'release'
        addGameVersion "NeoForge"
        addGameVersion "${minecraft_version}"
        addGameVersion "1.21" // Temporary extra game version
        addGameVersion "Java 21"
        mainArtifact(jar)
        relations{
            requiredDependency "patchouli"
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

